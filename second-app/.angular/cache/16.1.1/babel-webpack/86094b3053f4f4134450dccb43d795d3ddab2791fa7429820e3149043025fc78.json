{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class HeroService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.heroesUrl = 'api/heroes'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /** GET heroes from the server */\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(tap(_ => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n  }\n  /** GET hero by id. Return `undefined` when id not found */\n  getHeroNo404(id) {\n    const url = `${this.heroesUrl}/?id=${id}`;\n    return this.http.get(url).pipe(map(heroes => heroes[0]),\n    // returns a {0|1} element array\n    tap(h => {\n      const outcome = h ? 'fetched' : 'did not find';\n      this.log(`${outcome} hero id=${id}`);\n    }), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id) {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  /* GET heroes whose name contains search term */\n  searchHeroes(term) {\n    if (!term.trim()) {\n      // if not search term, return empty hero array.\n      return of([]);\n    }\n    return this.http.get(`${this.heroesUrl}/?name=${term}`).pipe(tap(x => x.length ? this.log(`found heroes matching \"${term}\"`) : this.log(`no heroes matching \"${term}\"`)), catchError(this.handleError('searchHeroes', [])));\n  }\n  //////// Save methods //////////\n  /** POST: add a new hero to the server */\n  addHero(hero) {\n    return this.http.post(this.heroesUrl, hero, this.httpOptions).pipe(tap(newHero => this.log(`added hero w/ id=${newHero.id}`)), catchError(this.handleError('addHero')));\n  }\n  /** DELETE: delete the hero from the server */\n  deleteHero(id) {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted hero id=${id}`)), catchError(this.handleError('deleteHero')));\n  }\n  /** PUT: update the hero on the server */\n  updateHero(hero) {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError('updateHero')));\n  }\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   *\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** Log a HeroService message with the MessageService */\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n}\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","of","catchError","map","tap","HeroService","constructor","http","messageService","heroesUrl","httpOptions","headers","getHeroes","get","pipe","_","log","handleError","getHeroNo404","id","url","heroes","h","outcome","getHero","searchHeroes","term","trim","x","length","addHero","hero","post","newHero","deleteHero","delete","updateHero","put","operation","result","error","console","message","add","i0","ɵɵinject","i1","HttpClient","i2","MessageService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\HP\\Downloads\\toh-pt6\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Hero } from './hero';\nimport { MessageService } from './message.service';\n\n\n@Injectable({ providedIn: 'root' })\nexport class HeroService {\n\n  private heroesUrl = 'api/heroes';  // URL to web api\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService) { }\n\n  /** GET heroes from the server */\n  getHeroes(): Observable<Hero[]> {\n    return this.http.get<Hero[]>(this.heroesUrl)\n      .pipe(\n        tap(_ => this.log('fetched heroes')),\n        catchError(this.handleError<Hero[]>('getHeroes', []))\n      );\n  }\n\n  /** GET hero by id. Return `undefined` when id not found */\n  getHeroNo404<Data>(id: number): Observable<Hero> {\n    const url = `${this.heroesUrl}/?id=${id}`;\n    return this.http.get<Hero[]>(url)\n      .pipe(\n        map(heroes => heroes[0]), // returns a {0|1} element array\n        tap(h => {\n          const outcome = h ? 'fetched' : 'did not find';\n          this.log(`${outcome} hero id=${id}`);\n        }),\n        catchError(this.handleError<Hero>(`getHero id=${id}`))\n      );\n  }\n\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id: number): Observable<Hero> {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get<Hero>(url).pipe(\n      tap(_ => this.log(`fetched hero id=${id}`)),\n      catchError(this.handleError<Hero>(`getHero id=${id}`))\n    );\n  }\n\n  /* GET heroes whose name contains search term */\n  searchHeroes(term: string): Observable<Hero[]> {\n    if (!term.trim()) {\n      // if not search term, return empty hero array.\n      return of([]);\n    }\n    return this.http.get<Hero[]>(`${this.heroesUrl}/?name=${term}`).pipe(\n      tap(x => x.length ?\n         this.log(`found heroes matching \"${term}\"`) :\n         this.log(`no heroes matching \"${term}\"`)),\n      catchError(this.handleError<Hero[]>('searchHeroes', []))\n    );\n  }\n\n  //////// Save methods //////////\n\n  /** POST: add a new hero to the server */\n  addHero(hero: Hero): Observable<Hero> {\n    return this.http.post<Hero>(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap((newHero: Hero) => this.log(`added hero w/ id=${newHero.id}`)),\n      catchError(this.handleError<Hero>('addHero'))\n    );\n  }\n\n  /** DELETE: delete the hero from the server */\n  deleteHero(id: number): Observable<Hero> {\n    const url = `${this.heroesUrl}/${id}`;\n\n    return this.http.delete<Hero>(url, this.httpOptions).pipe(\n      tap(_ => this.log(`deleted hero id=${id}`)),\n      catchError(this.handleError<Hero>('deleteHero'))\n    );\n  }\n\n  /** PUT: update the hero on the server */\n  updateHero(hero: Hero): Observable<any> {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(\n      tap(_ => this.log(`updated hero id=${hero.id}`)),\n      catchError(this.handleError<any>('updateHero'))\n    );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  /** Log a HeroService message with the MessageService */\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}